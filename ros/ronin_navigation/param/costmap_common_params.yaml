# R O N I N

# voxel map configuration; z-voxels 0 are filled by bumpers and 1 by laser scan (kinect)

# origin_z: 0.0
# z_resolution: 0.2
# z_voxels: 2
# publish_voxel_map: false

# --------------------------------------------------------------

# The maximum height in meters of a sensor reading considered valid. 
# This is usually set to be slightly higher than the height of the robot
# (double, default: 2.0)
max_obstacle_height: 0.5

# The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters
# (double, default: 2.5)
obstacle_range: 2.5

# The default range in meters at which to raytrace out obstacles from the map using sensor data
# (double, default: 3)
raytrace_range: 3.0

# The radius of the robot in meters, this parameter should only be set for circular robots
# all others should use the "footprint" parameter
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]
robot_radius: 0.12

# The radius in meters to which the map inflates obstacle cost values
# (double, default: 0.55)
inflation_radius: 0.25         # (geduino, 0.25)

# A scaling factor to apply to cost values during inflation. 
# NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, 
# increasing the factor will decrease the resulting cost values
# (double, default: 10.0)
cost_scaling_factor: 2.0        # (chefbot, 5.0) (turtlebot3, 3.0)

# What map type to use. "voxel" or "costmap" are the supported types, with the difference between them 
# being a 3D-view of the world vs. a 2D-view of the world
# (string, default: "voxel")
map_type: costmap

# Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing
# a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. 
# For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not
# (double, default: 0.2)
transform_tolerance: 0.5        # (geduino, 0.3) (chefbot, 0.5) (turtlebot, 0.5)

#observation_sources: scan bump
observation_sources: scan

# scan: {data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: 0.25, max_obstacle_height: 0.35}
# Our lasers (Xtion and fake) either needs to publish a height, or set min_obstacle_height to 0.0:
# http://wiki.ros.org/navigation/Troubleshooting#Missing_Obstacles_in_Costmap2D
# Note taht the max_obstacle_height is very important too!
scan: {data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: 0.0, max_obstacle_height: 3}
# Can we just set up two of these here?
#bump: {data_type: PointCloud2, topic: mobile_base/sensors/bumper_pointcloud, marking: true, clearing: false, min_obstacle_height: 0.0, max_obstacle_height: 0.15}
