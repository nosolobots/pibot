# R O N I N

# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state
# (bool, default: false)
shutdown_costmaps: false

# The rate in Hz at which to run the control loop and send velocity commands to the base
# (double, default: 20.0)
controller_frequency: 10.0      # (geduino, 15.0) (chefbot, 5.0)

# How long the controller will wait in seconds without receiving a valid control before 
# space-clearing operations are performed
# (double, default: 15.0)
controller_patience: 10.0       # (chefbot, 3.0)

# The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner
# will only run when a new goal is received or the local planner reports that its path is blocked
# (double, default: 0.0)
planner_frequency: 1.0          # (chefbot, 1.0)

# How long the planner will wait in seconds in an attempt to find a valid plan before 
# space-clearing operations are performed
# (double, default: 5.0)
planner_patience: 5.0

# How long in seconds to allow for oscillation before executing recovery behaviors.
# A value of 0.0 corresponds to an infinite timeout
# (double, default: 0.0)
oscillation_timeout: 10.0        # (chefbot, 10.0)

# How far in meters the robot must move to be considered not to be oscillating. 
# Moving this far resets the timer counting up to the ~oscillation_timeout
# (double, default: 0.5)
oscillation_distance: 0.2       # (chefbot, 0.2)

# The name of the plugin for the local planner to use with move_base
# (string, default: "base_local_planner/TrajectoryPlannerROS")
# (chefbot, "dwa_local_planner/DWAPlannerROS")
base_local_planner: "dwa_local_planner/DWAPlannerROS"
#base_local_planner: "base_local_planner/TrajectoryPlannerROS"

# The name of the plugin for the global planner to use with move_base   
# (string, default: "navfn/NavfnROS" For 1.1+ series)
base_global_planner: "navfn/NavfnROS"