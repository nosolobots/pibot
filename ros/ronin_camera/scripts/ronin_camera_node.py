#!/usr/bin/env python

# ----------------------------------------------------------------------------
# file: ronin_camera_node.py
# pkg:  ronin_camera
# 
# node: ronin_camera_node
# sub:  /servo_cam
# pub:         
# 
# desc: Subscribes to /servo_cam messages generated by ronin_teleop nodes and
#       moves the servo motors accordingly
#      
# ver:  0.1 (jul-18)
#
# upd:        
# ----------------------------------------------------------------------------

import rospy
import pigpio
import time
from ronin_msgs.msg import CamServo

_NODE_NAME = "ronin_camera_node"

class ServoCam():
    # servo position values
    _OFF = 0        
    _DEFAULT_PITCH_MAX = 2400
    _DEFAULT_PITCH_MIN = 1700
    _DEFAULT_PITCH_CENTER = 2000    
    _DEFAULT_YAW_MAX = 1860
    _DEFAULT_YAW_MIN = 1260
    _DEFAULT_YAW_CENTER = 1560    
    
    # default pin values
    _DEFAULT_PITCH_PIN = 24
    _DEFAULT_YAW_PIN = 23

    def __init__(self, pi):

        # Init object members
        self.pi = pi
        self.pitch_servo_pin = rospy.get_param("~pitch_servo_pin",
                                            self._DEFAULT_PITCH_PIN)
        self.pitch_servo_max = rospy.get_param("~pitch_servo_max",
                                            self._DEFAULT_PITCH_MAX)
        self.pitch_servo_min = rospy.get_param("~pitch_servo_min",
                                            self._DEFAULT_PITCH_MIN)
        self.pitch_servo_center = rospy.get_param("~pitch_servo_center",
                                            self._DEFAULT_PITCH_CENTER)
        self.yaw_servo_pin = rospy.get_param("~yaw_servo_pin",
                                            self._DEFAULT_YAW_PIN)
        self.yaw_servo_max = rospy.get_param("~yaw_servo_max",
                                            self._DEFAULT_YAW_MAX)
        self.yaw_servo_min = rospy.get_param("~yaw_servo_min",
                                            self._DEFAULT_YAW_MIN)
        self.yaw_servo_center = rospy.get_param("~yaw_servo_center",
                                            self._DEFAULT_YAW_CENTER)

        self.pitch_servo_cmd = 0
        self.pitch_servo_final_pos = 0
        self.yaw_servo_cmd = 0
        self.yaw_servo_final_pos = 0

        # ROS Node Subscriber
        self.sub_servo_cam = rospy.Subscriber('servo_cam', CamServo,
                                        self.servo_cam_cb, queue_size = 1)

        # Init servos
        self.pi.set_mode(self.pitch_servo_pin, pigpio.OUTPUT)
        self.pi.set_mode(self.yaw_servo_pin, pigpio.OUTPUT)
        self.center_cam()
    
    def center_cam(self):
        self.pitch_servo_pos = self.pitch_servo_center
        self.yaw_servo_pos = self.yaw_servo_center
        self.pi.set_servo_pulsewidth(self.pitch_servo_pin, 
                                     self.pitch_servo_center)
        self.pi.set_servo_pulsewidth(self.yaw_servo_pin, 
                                     self.yaw_servo_center)
        time.sleep(0.5) # pause to complete movement
        self.pi.set_servo_pulsewidth(self.pitch_servo_pin, 0)
        self.pi.set_servo_pulsewidth(self.yaw_servo_pin, 0)
        
    def servo_off(self, pin):
        self.pi.set_servo_pulsewidth(pin, self._OFF)

    def pitch_servo_move(self, direction):
        if(direction == 1 and self.pitch_servo_pos < self.pitch_servo_max):
            # CCW
            self.pitch_servo_pos += .1
            print("pitch_max: {} curr: {}".format(self.pitch_servo_max,self.pitch_servo_pos))
        elif(direction == -1 and self.pitch_servo_pos > self.pitch_servo_min):
            # CW
            self.pitch_servo_pos -= .1
            print("pitch_max: {} curr: {}".format(self.pitch_servo_max,self.pitch_servo_pos))
	
        self.pi.set_servo_pulsewidth(self.pitch_servo_pin, 
                                     int(self.pitch_servo_pos))

    def yaw_servo_move(self, direction):
        #if(direction == 1 and self.yaw_servo_pos < self.yaw_servo_final_pos):
        if(direction == 1 and self.yaw_servo_pos < self.yaw_servo_max):
            # CCW
            self.yaw_servo_pos += .1
            print("yaw_max: {} curr: {}".format(self.yaw_servo_max,self.yaw_servo_pos))
        #elif(direction == -1 and self.yaw_servo_pos > self.yaw_servo_final_pos):
        elif(direction == -1 and self.yaw_servo_pos > self.yaw_servo_min):
            # CW
            self.yaw_servo_pos -= .1
            print("yaw_max: {} curr: {}".format(self.yaw_servo_max,self.yaw_servo_pos))
	
        self.pi.set_servo_pulsewidth(self.yaw_servo_pin, 
                                     int(self.yaw_servo_pos))

    def servo_cam_cb(self, cam_servo_msg):
        self.pitch_servo_cmd = cam_servo_msg.rot_pitch
        self.yaw_servo_cmd = cam_servo_msg.rot_yaw
        if cam_servo_msg.center_cam:
            self.center_cam()
            
    def spin(self):
        # Pitch
        if(self.pitch_servo_cmd):
            self.pitch_servo_move(self.pitch_servo_cmd)
        #else:
        #    self.servo_off(self.pitch_servo_pin)

        #Yaw
        if(self.yaw_servo_cmd):
            self.yaw_servo_move(self.yaw_servo_cmd)
        #else:
        #    self.servo_off(self.yaw_servo_pin)

if __name__ == '__main__':
    # Init pigpio library
    pi = pigpio.pi()    # main pigpio object

    if not pi.connected:
        exit('pigpio: no pi connected!')

    # Init ros node
    rospy.init_node(_NODE_NAME, log_level = rospy.INFO)
    
    # Main servo cam object
    cam = ServoCam(pi)

    while not rospy.is_shutdown():
        cam.spin()

    pi.stop()
